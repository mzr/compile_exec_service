name: "compile_exec_service"

mode: LISTEN
hostname: "compile_exec_service"

bindhost: "0.0.0.0"
port: 1337

# The default is 0,1,2 anyway - but let's be explicit
pass_fd: 0
pass_fd: 1
pass_fd: 2

# Should the current environment variables be kept when executing the binary?
keep_env: true

# IMPORTANT: must be in sync with whatever CGRP path is in run_service.sh
cgroup_mem_mount: "/sandbox_cgroups/memory"
cgroup_pids_mount: "/sandbox_cgroups/pids"
cgroup_cpu_mount: "/sandbox_cgroups/cpu"

# Maximum number of PIDs in the cgroup (i.e. we won't be able to spawn more than the number here)
# 5 for now
cgroup_pids_max: 5
# Maximum memory usage in the cgroup in bytes (i.e. attempts to allocate more will fail)
# 32 MiB
cgroup_mem_max: 33554432

# timeout
time_limit: 120
# number of ms per sec of CPU time the jailed process can use
cgroup_cpu_ms_per_sec: 900
# amount of CPU time the process can consume in seconds
rlimit_cpu: 60
# Maximum number of CPUs to use: 0 - no limit
max_cpus: 1

# Memory limits via rlimit
# max size of process's virtual memory (address space) in MiB
rlimit_as: 64
# max size of a core file in MiB; 0 means no core dump files are created
rlimit_core: 0
# max size of files the process may create in MiB
rlimit_fsize: 16
# max size of the process stack, in MiB
rlimit_stack: 6
# value one greater than the maximum file descriptor number that can be opened by jailed process
rlimit_nofile: 20

rlimit_stack_type: SOFT
rlimit_nproc_type: SOFT

mount_proc: false

mount {
    src: "/home/service"
    dst: "/home/service"
    is_bind: true
    rw: false
}

mount {
    src: "/etc"
    dst: "/etc"
    is_bind: true
    rw: false
}

mount {
    src: "/null"
    dst: "/dev/null"
    is_bind: true
    rw: true
}

mount {
    src: "/lib"
    dst: "/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/lib64"
    dst: "/lib64"
    is_bind: true
    rw: false
}

mount {
    src: "/usr"
    dst: "/usr"
    is_bind: true
    rw: false
}

mount {
    src: "/bin"
    dst: "/bin"
    is_bind: true
    rw: false
}

mount {
    dst: "/tmp"
    fstype: "tmpfs"
    rw: true
}

exec_bin {
    path: "/home/service/runner"

    # Can be used to test the environment
    # but note that it requires /bin mount and [probably] more than 1 max pids limit!
    # path: "/bin/sh"
}
